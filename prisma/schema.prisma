// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Media {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  mediaType String
  mediaId String
  mediaTitle String
  mediaPoster String
  status Status @default(NOTHING)
  point Int @default(-1)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, mediaId, mediaType])
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String   @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role   @default(MEMBER)
  accounts  Account[]
  media    Media[]
  emailVerified DateTime?
}

enum Role {
  ADMIN
  MEMBER
}

enum Type {
  MOVIE
  SERIE
  ANIME
}

enum Status {
  NOTHING
  WATCHING
  WATCHED
  PLAN_TO_WATCH
  DROPPED
}




// model Session {
//   id           String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId       String @db.ObjectId
//   expires      DateTime
//   sessionToken String
//   accessToken  String
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }